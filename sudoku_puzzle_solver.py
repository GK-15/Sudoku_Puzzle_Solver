# -*- coding: utf-8 -*-
"""SUDOKU_puzzle_Solver.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16-YMlPd0QPwuMPWSOkX0IKmgNTIJ6ZFo

#**SUDOKU Puzzle Solver**
"""

def cross(a, b):
    return [s+t for s in a for t in b]

#create grid for the puzzle
rows = 'ABCDEFGHI'
cols = '123456789'
boxes = cross(rows, cols)
row_units = [cross(r, cols) for r in rows]
column_units = [cross(rows, c) for c in cols]
square_units = [cross(rs, cs) for rs in ('ABC','DEF','GHI') for cs in ('123','456','789')]
unitlist = row_units + column_units + square_units
units = dict((s, [u for u in unitlist if s in u]) for s in boxes)
#Create peers dictionary
peers = dict((s, set(sum(units[s],[]))-set([s])) for s in boxes)

#code for displaying grid
def display(values):
    width = 1 + max(len(values[s]) for s in boxes)
    line = '+'.join(['-'*(width*3)]*3)
    for r in rows:
        print(''.join(values[r+c].center(width)+('|' if c in '36' else '') for c in cols))
        if r in 'CF': print(line)      
    return

#Initialise grid inputs
def Grid_Inputs(sudoku_output):
    assert len(sudoku_output) == 81
    return dict(zip(boxes, sudoku_output))
#displaying the grid with inputs of the puzzle
print("SUDOKU Puzzle - Unsolved")
print("--------------------")
sudoku_output = Grid_Inputs('51...4.7...42...3....6....93.........5..2.7..9..37.4....174.3.....8...57.....6...')
display(sudoku_output)
print("--------------------")

#For Elimination and selection
def Grid_Inputs(sudoku_output):
    values = []
    all_digits = '123456789'
    for c in sudoku_output:
        if c == '.':
            values.append(all_digits)
        elif c in all_digits:
            values.append(c)
    assert len(values) == 81
    return dict(zip(boxes, values))
sudoku_output = Grid_Inputs('51...4.7...42...3....6....93.........5..2.7..9..37.4....174.3.....8...57.....6...')

def Elimination_process(values):
    solved_values = [box for box in values.keys() if len(values[box]) == 1]
    for box in solved_values:
        digit = values[box]
        for peer in peers[box]:
            values[peer] = values[peer].replace(digit,'')       
    return values
#displaying the grid after performing elimination in the puzzle
print("Puzzle after Elimination process")
print("-----------------------------------------------------------------")
sudoku_output = Elimination_process(sudoku_output)
display(sudoku_output)
print("-----------------------------------------------------------------")

def Selection_process(values):
    for unit in unitlist:
        for digit in '123456789':
            dplaces = [box for box in unit if digit in values[box]]
            if len(dplaces) == 1:
                values[dplaces[0]] = digit        
    return values
#displaying the grid after performing selection in the puzzle
print("Puzzle after choose process")
print("-----------------------------------------------------------------")
sudoku_output = Selection_process(sudoku_output)
display(sudoku_output)
print("-----------------------------------------------------------------")

def Final_sudoku_puzzle_output(values):
    stalled = False
    while not stalled:
        puzzle_solved = len([box for box in values.keys() if len(values[box]) == 1])
        values = Elimination_process(values)
        values = Selection_process(values)
        solved_values_after = len([box for box in values.keys() if len(values[box]) == 1])
        stalled = puzzle_solved == solved_values_after
        if len([box for box in values.keys() if len(values[box]) == 0]):
            return False 
    return values
#displaying the final output of the solved SUDOKU Puzzle
print("Final Solved SUDOKU Puzzle")
print("--------------------")
sudoku_output = Final_sudoku_puzzle_output(sudoku_output)
display(sudoku_output)
print("--------------------")